/* Header for module maxd, generated by p2c */
#ifndef MAXD_H
#define MAXD_H


#ifdef MAXD_G
# define vextern
#else
# define vextern extern
#endif


/*
__________________________________________________________________________

This set of programs constructs full atomic coordinates of a protein
from a given C(alpha) trace and optimizes side chain geometry.

Copyright by Liisa Holm and Chris Sander, 1989-1991.

No redistribution, no program changes, no commercial use.

For details, see J.Mol.Biol. 218, 183-194 (1991).

___________________________________________________________________________
*/
/* array dimensioning constants */

#define maxlen          30
#define maxres          10000
#define scaler          100
#define maxprot         100


/* string type declarations */

typedef Char string[81];

typedef Char a1;

typedef Char a2[2];
typedef Char a3[3];
typedef Char a4[4];
typedef Char a5[5];
typedef Char a6[6];
typedef Char a10[10];

/* openfile types */

typedef enum {
  infile, outfile
} inout;

/* CA distances */

typedef long dist_array[maxlen + 1];
typedef dist_array distancematrix[maxres];

typedef struct protlist_record {
  string protname;
  long start, length;
} protlist_record;

typedef protlist_record protlist[maxprot];


typedef struct score_record {
  long begresidue, matchresidue, matchlength, matchprotlistindex;
  string matchprotname;
  double score, carms;
  struct score_record *prevscore, *nextscore;
} score_record;

typedef boolean gaparray[maxres];

/* protein list type declarations */

typedef double xyz[3];

typedef struct main_record {
  xyz n, ca, c, o;
} main_record;


typedef struct atom_record {
  struct atom_record *nextatom, *prevatom;
  xyz coord;
  a4 atomname;
  long icode;   /* free to use */
} atom_record;

typedef struct backbone_record {
  a4 resname;
  a5 resno;
  main_record main;
  a10 pdbresid;
} backbone_record;

typedef struct residue_record {
  struct residue_record *nextresidue, *prevresidue;
  backbone_record backbone;
  atom_record *firstside;
} residue_record;

typedef struct protein_record {
  struct protein_record *prevprotein, *nextprotein;
  string protname;
  long length, extra;   /* user's fancy */
  residue_record *firstresidue;
} protein_record;

typedef struct dist_record {
  dist_array d;
  residue_record *respo;
} dist_record;

typedef dist_record distm[maxres];

/* -------------------------------------------------------------------------- */


/*u3b*/
typedef double t1[maxres * 4];
typedef xyz t2[maxres * 4];
typedef double rotationmatrix[3][3];
typedef double translationvector[3];

/* -------------------------------------------------------------------------- */


typedef backbone_record fragmentcoord[maxlen + 1];


typedef struct fragment_record {
  double rmssum, maxdelta;
  long sourceprotno, sourceresno, longeur, njumpto;
  struct fragment_record *prevfragment, *prev, *nextfragment;
  backbone_record main0, main1, main2;
  struct jump_record *firstjump;
} fragment_record;

typedef struct jump_record {
  struct jump_record *nextjump, *prev;
  fragment_record *jumpfromfragment;
  double biggestdelta, rmsdelta;
} jump_record;

typedef fragment_record *fragmentlistarray[maxres];

/* lookup table */


#define maxl            8
#define maxdist         4000   /* distance unit is 0.01 A */


typedef struct hit_record {
  struct hit_record *nexthit;
  long protno, resno;
} hit_record;

typedef hit_record lookuptable[maxl][maxdist + 1];

/* ----------------------------------------------------------------- */
/* external procedures */


extern Void u3b PP((double *w, xyz *x, xyz *y, long n, long mode, double *rms,
		    double (*u)[3], double *t, long *ier));


#undef vextern

#endif /*MAXD_H*/

/* End. */
